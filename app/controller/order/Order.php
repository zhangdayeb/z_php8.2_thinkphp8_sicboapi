<?php

namespace app\controller\order;

use app\controller\common\LogHelper;
use app\model\GameRecords as models;
use app\model\GameRecordsTemporary;
use app\model\MoneyLog;
use app\model\Odds;
use app\model\Table;
use app\model\UserModel;
use think\facade\Db;

class Order extends OrderBase
{
    protected $model;


    public function initialize()
    {
        $this->model = new models();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    //用户下注
    public function user_bet_order(): string
    {
        LogHelper::debug('=== 用户下注流程开始 ===', [
            'user_id' => self::$user['id'],
            'user_balance' => self::$user['money_balance'],
            'ip' => request()->ip()
        ]);

        $post = $this->request->param('bet');      // 获取投注记录 主要是 注码跟金额
        if (empty($post)) show([], config('ToConfig.http_code.error'), 'amount not selected');  // 空数据 处理
        
        $table_id = $this->request->param('table_id/d', 0);                                           // 获取台桌ID
        if (empty($table_id)) show([], config('ToConfig.http_code.error'), 'table not selected');          // 为空，提示选择台桌
        
        $game_type = $this->request->param('game_type/d', 0);                                         // 获取游戏类型
        if (empty($game_type)) show([], config('ToConfig.http_code.error'), 'game not selected');         //  为空，则提示
        if ($game_type != 9) show([], config('ToConfig.http_code.error'), 'game not selected');    //  不是骰宝 提示 
        //查询台桌状态

        LogHelper::debug('下注参数接收', [
            'bet_data' => $post,
            'table_id' => $table_id,
            'game_type' => $game_type
        ]);

        $find = Table::page_one($table_id);
        if (empty($find)) show([], config('ToConfig.http_code.error'), 'table does not exist');                // 台桌不存在
        if ($find['status'] != 1) show([], config('ToConfig.http_code.error'), 'table stop');          // 台桌非运营状态
        $find = Table::table_opening_count_down($find);
        if ($find['run_status'] != 1 || $find['end_time'] <= 0) show([], config('ToConfig.http_code.error'), 'opening card');// 台桌开牌中，禁止投注


        if (cache('cache_post_order_bet_' . self::$user['id'])) {
            show([],config('ToConfig.http_code.error'), '1秒不能重复操作');
        }
        cache('cache_post_order_bet_' . self::$user['id'], time(), 1);

        // 根据台桌ID 获取当期的 靴号 跟 铺号
        $xue_number = xue_number($table_id);    //生成铺号 生成靴号 类似 ['xue_number' => $xue, 'pu_number' => $pu]

        #########查询是否当前局下注过############下注过取当前局的下注免佣状态，没下注过取传过来的免佣状态
        $is_exempt = $this->request->param('is_exempt', 0);//免佣状态。默认关闭
        //查询是否已经购买过一次 当前局   // 101 没下单过.不是101表示下注过，返回当前下注免佣状态
        $is_order = GameRecordsTemporary::user_status_bureau_number_is_exempt($table_id, $xue_number, self::$user, true);

        // 如果发送过来的数据 免佣状态与 当前的免佣状态不同，则提示无法投注
        if ($is_order != 101 && $is_order != $is_exempt) {
            show([],config('ToConfig.http_code.error'), lang('the Council has bet') . ':' . $is_order);
        }
        #########查询是否当前局下注过结束############


        $total_money = 0;//本次消费金额
        //如果数据是错的，直接删除掉。只保留有数据的
        $post_info = [];
        foreach ($post as $key => $value) {                             // $post  为前端传递过来的 bet 数组

            if (!isset($value['money'])) unset($post[$key]);            // 钱数为空，干掉
            if (!isset($value['rate_id'])) unset($post[$key]);          // 投注ID为空，干掉
            if ($value['money'] <= 0 || $value['rate_id'] <= 0) {       // 负数 干掉
                unset($post[$key]);
                continue;
            }
            $value['money'] = intval($value['money']);
            $value['rate_id'] = intval($value['rate_id']);

            $total_money += $value['money'];                              // 累计当局全部金额
            $odds = Odds::data_one($value['rate_id']);                    // 查询当前数据 查询该赔率
            $this->user_xian_hong($table_id, $value, $xue_number, $odds,$find); //限红 后续增加 个人不同的限红判断

            // 数据组装 方便插入
            $post_info[$key]['money'] = $value['money'];
            $post_info[$key]['rate_id'] = $value['rate_id'];
            $post_info[$key]['rate_info'] = $odds;
            $post_info[$key]['rate_info_id'] = $odds['id'];
            $post_info[$key]['rate_info_name'] = $odds['game_tip_name'];
            $post_info[$key]['rate_info_peilv'] = $odds['peilv'];
            // 针对未获取到赔率的进行特殊提示
            if (!$post_info[$key]['rate_info']) show([],config('ToConfig.http_code.error'), 'please fill in the correct odds id');
        }

        #########因为重复下注的逻辑改变了，仅仅保留最后一次的投注记录 删除本靴本铺 之前投注的全部记录 开始############
        // 第一步：统计之前的钱数
        $mapForDel = array();
        $mapForDel['user_id'] = self::$user['id'];
        $mapForDel['table_id'] = $table_id;
        $mapForDel['xue_number'] = $xue_number['xue_number'];
        $mapForDel['pu_number'] = $xue_number['pu_number'];
        $mapForDel['game_type'] = $game_type;
        $mapForDel['close_status'] = 1;
        $delBetMoney = $this->model->where($mapForDel)->whereDay('created_at')->sum('bet_amt');
        $delBetMoney = is_numeric($delBetMoney) ? $delBetMoney : 0;

        // ++++++++++花式插入判断开始++++++
        //获取最大下注
        $app_bet_max = !empty(get_config('app_bet_max')) ? get_config('app_bet_max')['value'] : 0;
        if ($total_money + $delBetMoney > $app_bet_max) show([], config('ToConfig.http_code.error'), lang('the bureaus maximum bet') . ':' . $app_bet_max);
        // 游戏当前 最大赔率限制 判断
        $user_money = 0;
        if ($delBetMoney > 0) {
            if ((self::$user['money_balance'] + $delBetMoney) < $total_money) show([], config('ToConfig.http_code.error'), lang('your balance insufficient') . ':' . self::$user['money_balance']);
            // ++++++++++花式插入判断结束+++++++
            // 第二步：删除之前的全部投注记录
            $mapForDelLog = $this->model->whereTime('created_at','-30 Minutes')->where($mapForDel)->column('id');//删除资金记录
            //使用到本下注订单的 游戏 501现场  502 龙虎  509 骰宝
            MoneyLog::where('uid', self::$user['id'])
                ->where('status', 'in',[509])
                ->where('source_id', 'in', $mapForDelLog)
                ->whereTime('create_time','-30 Minutes')
                ->update(['status'=>$game_type*-1]);

            $this->model->where($mapForDel)->whereDay('created_at')->delete();
            GameRecordsTemporary::where($mapForDel)->whereDay('created_at')->delete();
            // 第三步：用户钱数加回去
            UserModel::where('id', self::$user['id'])->inc('money_balance', $delBetMoney)->update();
            $user_money = $delBetMoney;
        }
        #########因为重复下注的逻辑改变了，仅仅保留最后一次的投注记录 删除本靴本铺 之前投注的全部记录 结束############

        //组装订单  准备插入到投注记录表中的 新的投注数据
        $data = array();

        //获取用户当前金额
        $user_money += self::$user['money_balance']; // 重复下注的逻辑 当下 用户账户余额 self::$user['money_balance'] + $delBetMoney
        $dec_money = 0;                             // 本次 用户投注扣除金额
        // 遍历本轮 投注数据

        foreach ($post_info as $key => $value) {
            $dec_money += $value['money'];          // 累计 用户投注数据
            $data[$key] = [
                'user_id' => self::$user['id'],                                                         // 用户ID
                'before_amt' => $user_money,                                                            // 下注前金额
                'end_amt' => $user_money - $value['money'],                                             // 下注后金额
                'bet_amt' => $value['money'],                                                           // 投注金额
                'win_amt' => 0,                                                                         // 如果赢钱后的金额
                //洗码费 投注的金额 * 洗码的比例 = 洗码费 有代理就给代理，没有代理就返回给用户。
                //洗码量 就是买的金额,相当于流水，给客户的记录，用来限制提款的，应该是。
                //是否开启免佣。开起来没有洗码费
                //洗码费[返佣] 不等于 洗码量[流水]
                'shuffling_num' => $value['money'],                                                     // 洗码量
                'shuffling_amt' => 0,                                                                   // 下注时先不计算，等结算时再算
                'result' => $value['rate_info_id'],                                                     // 下注结果ID
                'shuffling_rate' => self::$user['xima_lv'] / 100,                                       // 洗码率
                'delta_amt' => -$value['money'],                                                        // 变化金额
                'table_id' => $table_id,                                                                // 投注台桌的ID
                'xue_number' => $xue_number['xue_number'],                                              // 投注的靴号
                'pu_number' => $xue_number['pu_number'],                                                // 投注的铺号
                'game_type' => $game_type,                                                              // 游戏类型
                'game_peilv_id' => $value['rate_info_id'],                                              // 游戏赔率ID
                'game_peilv' => $value['rate_info_peilv'],                                              // 游戏赔率
                'detail' => $value['rate_info_name'],                                                   // 游戏赔率详情
                'close_status' => 1,                                                                    // 关闭状态
                'created_at' => date('Y-m-d H:i:s'),                                             // 创建时间
                'updated_at' => date('Y-m-d H:i:s'),                                             // 更新时间
                'is_exempt' => $is_exempt,                                                               // 是否免佣
                'agent_status' => $is_exempt == 1 ? 1 : 0,                                               //  代理状态？这里暂时先异常吧
            ];

            //每一次下注后扣除当前余额
            $user_money = $user_money - $value['money'];
        }
        // 判断一下累计的金额是否超限
        if ($user_money < 0) {
            show([],config('ToConfig.http_code.error'), $dec_money . lang('the total amount exceeds your balance'));// 返回给前端展示 异常数据
        }

        //写入订单
        $log = new MoneyLog();
        $save = false;
        Db::startTrans();
        try {
            foreach ($data as $key => $value) {
                //插入下单数据
                $id = Db::name((new models())->name)->insertGetId($value);
                Db::name((new GameRecordsTemporary())->name)->insert($value);
                //插入资金记录
                $value['source_id'] = $id;
                $log->order_insert_bet_money_log($value);//下注为支出,状态为2
                //修改用户余额
                UserModel::where('id', self::$user['id'])->dec('money_balance', $value['bet_amt'])->update();
            }
            $save = true;// 标记完成
            Db::commit();// 提交事务
        } catch (\Exception $e) {
            Db::rollback();// 回滚事务
            show([],config('ToConfig.http_code.error'), $e->getMessage());// 提示错误信息
        }

        $data['money_balance'] = self::$user['money_balance'] - $dec_money;     // 返回给前端展示数据标注
        $data['money_spend'] = $dec_money;                                      // 返回给前端展示数据标注
        if ($save){
            // worker_tcp(self::$user['id'],lang('current bet'),$data,209);
            show($data);
        };
        show([], config('ToConfig.http_code.error'), 'bet failed');// 返回给前端展示 异常数据
    }


}